# Add resolver for Docker DNS
resolver 127.0.0.11 valid=30s;

server {
    listen 80;
    server_name localhost;

    # Public resources (no authentication required)
    location /public/ {
        root /usr/share/nginx;
        index index.html;
        try_files $uri $uri/ =404;
    }

    # Root redirects to the public area
    location = / {
        return 302 /public/;
    }

    # Protected resources (requires authentication)
    location /protected/ {
        # Auth request to MagicLink service
        auth_request /auth;
        
        # Handle auth errors
        error_page 401 = @unauthorized;

        # If we reach here, authentication succeeded
        root /usr/share/nginx;
        index index.html;
        try_files $uri $uri/ =404;

        # Add original URI header
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_token $upstream_http_x_auth_token;

        # Handle token to cookie conversion using Lua
        header_filter_by_lua_file /usr/local/openresty/nginx/conf/magiclink.lua;
    }

    # Auth request location - forward to MagicLink service
    location = /auth {
        internal;
        
        # Set the upstream host as a variable for resolver to work
        set $upstream_auth "magiclink";
        set $upstream_port "8080";
        set $upstream_endpoint "/auth";
        
        # Forward request to MagicLink service
        proxy_pass http://$upstream_auth:$upstream_port$upstream_endpoint$is_args$args;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        
        # Pass the original request path and query
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $host;
        
        # Pass cookie
        proxy_set_header Cookie $http_cookie;
    }
    
    # Handle unauthorized access with more appropriate message
    location @unauthorized {
        # Return an unauthorized message
        add_header Content-Type text/html;
        return 401 '<html><body style="font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
            <h1>Access Denied</h1>
            <p>You need a valid magic link to access this resource.</p>
            <p>In a production environment, you would:</p>
            <ol>
                <li>Generate a magic link from the admin service</li>
                <li>Send the link to the authorized user</li>
                <li>The user clicks the link to gain access</li>
            </ol>
            <p>For this demo, please use the separate admin service at <a href="http://localhost:8080/dashboard" target="_blank">http://localhost:8080/dashboard</a> to generate a token.</p>
            <p><strong>Note:</strong> The admin service is completely separate from this application and only exposed to localhost for security purposes.</p>
            <p style="margin-top: 20px;"><a href="http://localhost:8080/dashboard" target="_blank" style="display: inline-block; background-color: #0066cc; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px;">Open Admin Dashboard</a></p>
            </body></html>';
    }
}